import { ApiHandler } from "sst/node/api";
import { Time } from "@aidevs-course/core/time";
import { APIGatewayProxyEventV2 } from "aws-lambda";
import "dotenv/config";
import fetch, { RequestInit } from "node-fetch";
import { Configuration, OpenAIApi } from "openai";
import { ChatCompletionRequestMessage } from "openai/api";

export const handler = ApiHandler(async (event: APIGatewayProxyEventV2) => {
  const aiDevsApiKey = process.env.AI_DEVS_API_KEY;
  const aiDevsTasksUrl = "https://zadania.aidevs.pl";
  const taskName = "moderation";
  const aiDevsTaskTokenEndpointUrl = `${aiDevsTasksUrl}/token/${taskName}`;

  const options: RequestInit = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      apikey: aiDevsApiKey,
    }),
  };

  type TaskToken = {
    code: number;
    msg: string;
    token: string;
  };

  const taskTokenResponse = await fetch(aiDevsTaskTokenEndpointUrl, options);
  const taskToken = (await taskTokenResponse.json()) as TaskToken;

  const aiDevsTaskEndpointUrl = `${aiDevsTasksUrl}/task/${taskToken.token}`;
  const taskEndpointOptions: RequestInit = {
    method: "GET",
    headers: {
      "Content-Type": "application/json",
    },
  };

  type ModerationTask = {
    code: number;
    msg: string;
    input: [string, string, string, string];
  };

  const taskResponse = await fetch(aiDevsTaskEndpointUrl, taskEndpointOptions);
  const moderationTask = (await taskResponse.json()) as ModerationTask;

  // Business Logic
  const openaiConfiguration = new Configuration({
    organization: process.env.OPENAI_ORGANIZATION_ID,
    apiKey: process.env.OPENAI_API_KEY,
  });
  const openai = new OpenAIApi(openaiConfiguration);
  const prompt = `
Zachowuj siÄ™ jak doÅ›wiadczony moderator treÅ›ci, ktÃ³ry rygorystycznie rozpoznaje czy dana treÅ›Ä‡ powinna byÄ‡ moderowana czy nie. Twoje odpowiedzi powinny zawieraÄ‡ tylko i wyÅ‚Ä…cznie tablicÄ™ sformatowanÄ… zgodnie z instrukcjami w KontekÅ›cie.

### Kontekst

Otrzymasz tablicÄ™ z pewnymi zdaniami lub wyraÅ¼eniami.
Twoim zadaniem jest sklasyfikowanie kaÅ¼dego zadania czy powinno byÄ‡ moderowane czy nie.
Klasyfikacji dokonujesz przez podanie "1" jeÅ¼eli treÅ›Ä‡ musi byÄ‡ zmoderowana lub "0" jeÅ¼eli nie.

PrzykÅ‚adowe zdania:
['lubiÄ™ placki z dÅ¼emem', 'piÄ™kne kotki pijÄ… mleczko', 'Trzeba zbiÄ‡ to dziecko!', 'ale piÄ™kne niebo']

PrzykÅ‚adowa odpowiedÅº:
[0,0,1,0]

### Zadanie
${JSON.stringify(moderationTask.input)}
  `;

  const message: ChatCompletionRequestMessage = {
    role: "user",
    content: prompt,
  };
  const completionResponse = await openai.createChatCompletion({
    messages: [message],
    model: "gpt-4",
  });

  const chatResponseContent =
    completionResponse.data.choices[0].message?.content;
  let moderationPhrases = [] as number[];

  if (chatResponseContent) {
    moderationPhrases = JSON.parse(chatResponseContent) as number[];
  }

  // Verify answer
  const answerEndpointUrl = `${aiDevsTasksUrl}/answer/${taskToken.token}`;
  const answerRequestOptions: RequestInit = {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      answer: moderationPhrases,
    }),
  };

  const answerResponse = await fetch(answerEndpointUrl, answerRequestOptions);

  if (answerResponse.ok) {
    return {
      body: `Answer correct! ðŸŽ‰ðŸŽ‰ðŸŽ‰`,
    };
  }

  return {
    body: `Answer incorrect. â›” Time to bug hunting. ðŸª²`,
  };
});
