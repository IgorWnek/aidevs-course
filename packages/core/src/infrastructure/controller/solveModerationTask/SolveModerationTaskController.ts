import { AiDevsConfig } from '../../../../config/aiDevs/AiDevsConfig';
import fetch, { RequestInit } from 'node-fetch';
import { Configuration, OpenAIApi } from 'openai';
import { ChatCompletionRequestMessage } from 'openai/api';
import { OpenAiConfig } from '../../../../config/openAi/OpenAiConfig';

export interface SolveModerationTaskDependencies {
  aiDevsConfig: AiDevsConfig;
  openAiConfig: OpenAiConfig;
}

export interface SolveModerationTaskResponse {
  content:
    | 'Answer correct! ðŸŽ‰ðŸŽ‰ðŸŽ‰'
    | 'Answer incorrect. â›” Time to bug hunting. ðŸª²';
}

export class SolveModerationTaskController {
  public constructor(private dependencies: SolveModerationTaskDependencies) {}

  public async execute(): Promise<SolveModerationTaskResponse> {
    const { aiDevsConfig, openAiConfig } = this.dependencies;

    const aiDevsTasksUrl = 'https://zadania.aidevs.pl';
    const taskName = 'moderation';
    const aiDevsTaskTokenEndpointUrl = `${aiDevsTasksUrl}/token/${taskName}`;

    const options: RequestInit = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        apikey: aiDevsConfig.apiKey,
      }),
    };

    type TaskToken = {
      code: number;
      msg: string;
      token: string;
    };

    const taskTokenResponse = await fetch(aiDevsTaskTokenEndpointUrl, options);
    const taskToken = (await taskTokenResponse.json()) as TaskToken;

    const aiDevsTaskEndpointUrl = `${aiDevsTasksUrl}/task/${taskToken.token}`;
    const taskEndpointOptions: RequestInit = {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
      },
    };

    type ModerationTask = {
      code: number;
      msg: string;
      input: [string, string, string, string];
    };

    const taskResponse = await fetch(
      aiDevsTaskEndpointUrl,
      taskEndpointOptions
    );
    const moderationTask = (await taskResponse.json()) as ModerationTask;

    // Business Logic
    const openaiConfiguration = new Configuration({
      organization: openAiConfig.organization,
      apiKey: openAiConfig.apiKey,
    });
    const openai = new OpenAIApi(openaiConfiguration);
    const prompt = `
Zachowuj siÄ™ jak doÅ›wiadczony moderator treÅ›ci, ktÃ³ry rygorystycznie rozpoznaje czy dana treÅ›Ä‡ powinna byÄ‡ moderowana czy nie. Twoje odpowiedzi powinny zawieraÄ‡ tylko i wyÅ‚Ä…cznie tablicÄ™ sformatowanÄ… zgodnie z instrukcjami w KontekÅ›cie.

### Kontekst

Otrzymasz tablicÄ™ z pewnymi zdaniami lub wyraÅ¼eniami.
Twoim zadaniem jest sklasyfikowanie kaÅ¼dego zadania czy powinno byÄ‡ moderowane czy nie.
Klasyfikacji dokonujesz przez podanie "1" jeÅ¼eli treÅ›Ä‡ musi byÄ‡ zmoderowana lub "0" jeÅ¼eli nie.

PrzykÅ‚adowe zdania:
['lubiÄ™ placki z dÅ¼emem', 'piÄ™kne kotki pijÄ… mleczko', 'Trzeba zbiÄ‡ to dziecko!', 'ale piÄ™kne niebo']

PrzykÅ‚adowa odpowiedÅº:
[0,0,1,0]

### Zadanie
${JSON.stringify(moderationTask.input)}
  `;

    const message: ChatCompletionRequestMessage = {
      role: 'user',
      content: prompt,
    };
    const completionResponse = await openai.createChatCompletion({
      messages: [message],
      model: 'gpt-4',
    });

    const chatResponseContent =
      completionResponse.data.choices[0].message?.content;
    let moderationPhrases = [] as number[];

    if (chatResponseContent !== undefined) {
      moderationPhrases = JSON.parse(chatResponseContent) as number[];
    }

    // Verify answer
    const answerEndpointUrl = `${aiDevsTasksUrl}/answer/${taskToken.token}`;
    const answerRequestOptions: RequestInit = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        answer: moderationPhrases,
      }),
    };

    const answerResponse = await fetch(answerEndpointUrl, answerRequestOptions);

    if (answerResponse.ok) {
      return {
        content: `Answer correct! ðŸŽ‰ðŸŽ‰ðŸŽ‰`,
      };
    }

    return {
      content: `Answer incorrect. â›” Time to bug hunting. ðŸª²`,
    };
  }
}
